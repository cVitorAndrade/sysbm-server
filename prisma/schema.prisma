// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Librarian {
  id            String   @id
  email         String   @unique
  name          String
  password      String
  permission    String
  cpf           String
  phoneNumber   String
  status        String
  createdAt     DateTime
  books         Book[]
  loansIssued   Loan[]   @relation("IssuedBy")
  loansReceived Loan[]   @relation("ReceivedBy")
}

model BookShelf {
  id          String   @id
  name        String
  color       String
  description String?
  createdAt   DateTime
  shelves     Shelf[]
  books       Book[]
}

model Shelf {
  id          String    @id
  number      String
  letter      String
  bookShelf   BookShelf @relation(fields: [bookShelfId], references: [id], onDelete: Cascade)
  bookShelfId String
  books       Book[]
}

model Book {
  id                 String    @id
  registrationNumber String
  author             String
  volume             String
  bookShelf          BookShelf @relation(fields: [bookShelfId], references: [id])
  shelf              Shelf     @relation(fields: [shelfId], references: [id])
  shelfId            String
  bookShelfId        String
  publicationYear    String
  notes              String?
  publisher          String
  createdAt          DateTime
  copies             String
  acquisitionMethod  String
  title              String
  librarian          Librarian @relation(fields: [librarianId], references: [id])
  librarianId        String
  genre              String
  language           String
  available          String
  isbn               String    @unique
  numberOfPages      String
  loans              Loan[]
}

model Reader {
  id          String   @id
  email       String   @unique
  name        String
  cpf         String   @unique
  phoneNumber String
  createdAt   DateTime
  status      String
  birtDate    DateTime
  address     Address  @relation(fields: [addressId], references: [id])
  addressId   String
  loans       Loan[]
}

model Address {
  id           String   @id
  street       String
  number       String
  city         String
  postalCode   String
  neighborhood String
  createdAt    DateTime
  readers      Reader[]
}

enum LoanStatus {
  active
  returnedOnTime
  renewed
  overdue
  returnedLate
  lost
}

model Loan {
  id                    String     @id
  reader                Reader     @relation(fields: [readerId], references: [id])
  readerId              String
  librarian             Librarian  @relation("IssuedBy", fields: [librarianId], references: [id])
  librarianId           String
  receivedBy            Librarian? @relation("ReceivedBy", fields: [receivedById], references: [id])
  receivedById          String?
  book                  Book       @relation(fields: [bookId], references: [id])
  bookId                String
  bookConditionDelivery String
  bookConditionReturn   String?
  returnDate            DateTime?
  finalDate             DateTime
  createdAt             DateTime
  status                LoanStatus
  observation           String?
  timesRenewed          Int
}
